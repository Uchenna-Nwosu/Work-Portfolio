# -*- coding: utf-8 -*-
"""Cognifyz Internship Level 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d7eJsHgN2i0DndEC2eYMOINoFuRHaczd

# **Pre-Code**

---
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install --upgrade gspread

from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
creds, _ = default()

gc = gspread.authorize(creds)

# Replace with your spreadsheet ID
spreadsheet_id = '1LZOeIIL4zEgCeEYXqs4Ae2TKayDV0nnZjfIabCtMIdk'

# Open the spreadsheet by its ID
worksheet = gc.open_by_key (spreadsheet_id).get_worksheet(0)

# Select the Worksheet (Dataset)

# Access the data
data = worksheet.get_all_values()

#Print the Data
print(data)

import pandas as pd

!pip install pandas matplotlib seaborn

!pip install --upgrade matplotlib

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Get the value in cell B2
cell_value = worksheet.cell(2, 2).value # Changed 'Dataset' to 'worksheet'
print(cell_value)

# Get all values in row 3
row_values = worksheet.row_values(3) # Changed 'Dataset' to 'worksheet'
print(row_values)

# Assuming 'data' is the variable holding your spreadsheet data
num_rows = len(data)
num_cols = len(data[0]) if data else 0  # Handle empty data

print(f"Number of rows: {num_rows}")
print(f"Number of columns: {num_cols}")

# Assuming 'worksheet' is your gspread worksheet object
data = worksheet.get_all_values()  # Get all data from the worksheet

# Create the DataFrame, using the first row as headers
df = pd.DataFrame(data[1:], columns=data[0])

# Assuming 'data' contains your spreadsheet data as a list of lists
df = pd.DataFrame(data[1:], columns=data[0])  # Create DataFrame, using first row as headers

# Assuming 'worksheet' is your gspread worksheet object
original_data = worksheet.get_all_values()  # Get all data from the worksheet

# Now use 'original_data' to create your DataFrame
df = pd.DataFrame(original_data[1:], columns=original_data[0])

import matplotlib.pyplot as plt
import numpy as np

from mpl_toolkits.mplot3d import Axes3D

import matplotlib as mpl
mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=['blue', 'green', 'orange', 'gray', 'brown'])

"""# **LEVEL 1**

# **Task 1: Top Cuisines**

---
"""

# Extract the 'Cuisines' column
cuisines_column = df['Cuisines']

# Split cuisines and create a list of all cuisines
all_cuisines = []
for cuisines_list in cuisines_column:
    if isinstance(cuisines_list, str):  # Check if the value is a string
        all_cuisines.extend(cuisines_list.split(', '))

# Count the occurrences of each cuisine
cuisine_counts = pd.Series(all_cuisines).value_counts()

# Get the top 3 cuisines
top_3_cuisines = cuisine_counts.head(3)

# Count the occurrences of each cuisine
cuisine_counts = pd.Series(all_cuisines).value_counts()

# Get the top 3 cuisines
top_3_cuisines = cuisine_counts.head(3)

# Calculate the percentage of restaurants serving each of the top 3 cuisines
cuisine_percentages = (top_3_cuisines / len(df)) * 100

"""a) Determine the top three most common cuisines in the dataset.

---


"""

import matplotlib.pyplot as plt

import matplotlib as mpl

# Define your color palette using mpl.cycler
mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=['teal', 'green', 'orange', 'gray', 'brown'])


# Assuming top_3_cuisines is already defined (cuisine counts, not percentages)
cuisine_labels = top_3_cuisines.index.tolist()  # Get cuisine names
cuisine_sizes = top_3_cuisines.values.tolist()  # Get cuisine counts

# Create the pie chart with custom autopct to display counts
plt.pie(cuisine_sizes, labels=cuisine_labels,
        autopct=lambda p: '{:.0f}'.format(p * sum(cuisine_sizes) / 100),
        startangle=90)

# Add title
plt.title('Top 3 Most Common Cuisines (Counts)')

# Ensure the circle's proportion
plt.axis('equal')

# Display the chart
plt.show()

"""b) Calculate the percentage of restaurants that serve each of the top cuisines.

---


"""

from IPython.display import display, HTML

## Assuming top_3_cuisines and cuisine_percentages are already defined
data = {'Top 3 Cuisine': top_3_cuisines.index, '(Count)': top_3_cuisines.values, 'Percentage': cuisine_percentages.values}
df = pd.DataFrame(data)

df.style.format({'Percentage': '{:.2f}%'})


# Create an HTML table with a caption
table_html = f'<h3>Top 3 Most Common Cuisines & % Of Serving Restaurants</h3>{df.to_html()}'

# Display the HTML table
display(HTML(table_html))

"""*For better/easier analysis, a bar chart showing a calculation of the percentage of restaurants that serve each of the top cuisines.*"""

import matplotlib.pyplot as plt
import numpy as np
#from mpl_toolkits.mplot3d import Axes3D  # Not needed for 2D plot

import matplotlib as mpl

# Define your color palette using mpl.cycler
mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=['teal', 'green', 'orange', 'gray', 'brown'])

# Assuming top_3_cuisines and cuisine_percentages are already defined
cuisine_labels = top_3_cuisines.index.tolist()  # Get cuisine names
cuisine_sizes = cuisine_percentages.values.tolist()  # Get percentage values

# Create a figure and axes (no projection='3d')
fig, ax = plt.subplots(figsize=(5, 5))

# Hist positions and dimensions (simplified for 2D)
xpos = np.arange(len(cuisine_labels))  # X positions for each cuisine
width = 0.8  # Width of bars

# Create the hist chart
ax.bar(xpos, cuisine_sizes, width)  # Create bars for percentages

# Create the hist chart (using plt.bar)
ax.bar(xpos, cuisine_sizes, width, color=['teal', 'green', 'orange'], alpha=0.8) # Different colors for each cuisine


# Set labels and title
ax.set_xticks(xpos)
ax.set_xticklabels(cuisine_labels)  # Cuisine labels on x-axis
ax.set_ylabel('Percentage')  # Y-axis label for percentages
ax.set_title('Top 3 Most Common Cuisines')

# Add data labels (percentage values)
for i, v in enumerate(cuisine_sizes):
    ax.text(xpos[i], v + 1, f'{v:.1f}%',  # Adjust position for 2D
            ha='center', va='center', color='black')  # Adjust position and formatting as needed

# Display the chart
plt.show()

"""## **Insights from the Findings.**

---



### 1.   Dominance of North Indian Cuisine:

   *   Percentage: North Indian cuisine accounts for 41.5% of the restaurants surveyed.

   *   Count: This translates to 3960 restaurants, making it the most prevalent cuisine type.

   *   Insight: The popularity of North Indian cuisine suggests a strong cultural preference in the region. It could indicate opportunities for businesses related to this cuisine, such as restaurants, catering, and food delivery services.


### 2.   Significant Presence of Chinese Cuisine:

   *   Percentage: Chinese cuisine makes up 28.6% of the restaurants, which is notable.

   *   Count: There are 2735 restaurants offering Chinese cuisine.

   *   Insight: The high percentage of Chinese cuisine indicates a diverse culinary culture. It may appeal to customers looking for variety and might benefit from business ventures that offer fusion or diverse menu options.


### 3.   Popularity of Fast Food:

   *   Percentage: Fast food constitutes 20.8% of the restaurants, with 1988 establishments.

   *   Insight: The appeal of fast food aligns with modern consumers' preferences for convenience and quick meal options. This trend could lead to further growth in delivery services and casual dining experiences tailored to fast food.


### 4.   Market Opportunities:

   *   The data suggests a potential market for North Indian and Chinese cuisines due to their prevalence.

   *   For new restaurants, focusing on these cuisines, or offering innovative menu items within these categories, may attract customers. Conversely, exploring the growing demand for healthy fast food options can also be a strategic move.


### 5.   Consumer Preferences:

   *  The insights suggest a strong inclination towards traditional and fast food options. Understanding customer preferences and trends in these cuisines can help existing restaurants refine their offerings or allow new entrants to tailor their business models accordingly.


## Conclusion
The analysis of the top three cuisines reveals both consumer preferences and market opportunities. Businesses aiming to enter or expand in the food industry should consider the established popularity of North Indian and Chinese cuisines while also recognizing the growing trend in fast food. Leveraging these insights can inform marketing strategies, menu development, and overall business planning in the culinary landscape.

# Task 2: City Analysis

---
"""

# Extract the 'City' column
if 'City' in df.columns:
  City_column = df['City'].value_counts()  # Count occurrences of each city
else:
  # Try with lowercase
  if 'city' in df.columns:
    City_column = df['city'].value_counts()  # Count occurrences of each city
    print(f"Using column 'city' instead of 'City'")
  else:
    raise KeyError(f"Column 'City' or similar names not found in DataFrame. Available columns: {df.columns}")

"""a) Identify the city with the highest number of restaurants in the dataset.

---


"""

import pandas as pd

# Assuming your DataFrame is named 'df'
# Replace 'ActualColumnName' with the actual name of the city column in your DataFrame
city_counts = df['City'].value_counts()  # Count occurrences of each city
highest_count_city = city_counts.index[0]  # Get the city with the highest count
highest_count = city_counts.iloc[0]  # Get the highest count value

# Create a DataFrame for the table
table_data = {'City': [highest_count_city], 'No of Restaurants': [highest_count]}
table_df = pd.DataFrame(table_data)

# Add a title to the table using display and HTML
from IPython.display import display, HTML

# Create an HTML table with a caption (title)
table_html = f'<h3>City with the Most Restaurants</h3>{table_df.to_html()}'

# Display the HTML table with the title
display(HTML(table_html))

"""*For better/easier analysis, a table showing a descending list of cities and the number of restaurants residing in them.*"""

import pandas as pd
from IPython.display import display, HTML

# Assuming your DataFrame is named 'df' and has a 'City' column
city_counts = df['City'].value_counts()  # Count occurrences of each city

# Create a DataFrame from the city counts
city_restaurants_df = pd.DataFrame({'City': city_counts.index, 'No of Restaurants': city_counts.values})

# Sort the DataFrame by 'Number of Restaurants' in descending order
city_restaurants_df = city_restaurants_df.sort_values(by=['No of Restaurants'], ascending=False)

# Add a title to the table using display and HTML
table_html = f'<h3>A Descending List of Cities and Number of Restaurants</h3>{city_restaurants_df.to_html()}'

# Display the HTML table with the title
display(HTML(table_html))

"""b) Calculate the average rating for
restaurants in each city.
"""

import pandas as pd
from IPython.display import display, HTML

# Calculate the average rating for restaurants in each city
# 1. Convert 'Aggregate rating' to numeric, handling errors
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

average_ratings_df = df.groupby('City')['Aggregate rating'].mean().reset_index()

# Rename the columns for better clarity
average_ratings_df.columns = ['City', 'Average Rating']

# Create an HTML table with a caption
table_html = f'<h3>Average ratings for restaurants in each city</h3>{average_ratings_df.to_html()}'

# Display the HTML table
display(HTML(table_html))

"""c) Determine the city with the highest
average rating.
"""

import pandas as pd
from IPython.display import display, HTML

# Calculate the average rating for restaurants in each city
# 1. Convert 'Aggregate rating' to numeric, handling errors
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

average_ratings_df = df.groupby('City')['Aggregate rating'].mean().reset_index()

# Rename the columns for better clarity
average_ratings_df.columns = ['City', 'Average Rating']

# Find the city with the highest average rating
highest_rated_city = average_ratings_df.loc[average_ratings_df['Average Rating'].idxmax(), 'City']
highest_average_rating = average_ratings_df.loc[average_ratings_df['Average Rating'].idxmax(), 'Average Rating']


# Create a DataFrame for the table
table_data = {'City': [highest_rated_city], 'Average Rating': [highest_average_rating]}
table_df = pd.DataFrame(table_data)

# Add a title to the table using display and HTML
table_html = f'<h3>City with the Highest Average Rating</h3>{table_df.to_html()}'

# Display the HTML table with the title
display(HTML(table_html))

"""*For a deeper view into Cities and their ratings, a table showing Cities with the highest and lowest average ratings.*"""

import pandas as pd
from IPython.display import display, HTML

# Calculate the average rating for restaurants in each city
# 1. Convert 'Aggregate rating' to numeric, handling errors
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

average_ratings_df = df.groupby('City')['Aggregate rating'].mean().reset_index()

# Rename the columns for better clarity
average_ratings_df.columns = ['City', 'Average Rating']

# Sort by average rating in descending order and take the top 20
top_20_cities = average_ratings_df.sort_values(by=['Average Rating'], ascending=False).head(20)

# Sort by average rating in ascending order and take the bottom 20
bottom_20_cities = average_ratings_df.sort_values(by=['Average Rating'], ascending=True).head(20)

# Create HTML tables with captions
top_20_table_html = f'<h3>Top 20 Cities with Highest Average Rating</h3>{top_20_cities.to_html()}'
bottom_20_table_html = f'<h3>Bottom 20 Cities with Lowest Average Rating</h3>{bottom_20_cities.to_html()}'

# Display tables side-by-side using HTML and CSS
display(HTML(f"""
<div style="display: flex;">
    <div style="width: 50%;">{top_20_table_html}</div>
    <div style="width: 50%;">{bottom_20_table_html}</div>
</div>
"""))

"""## **Insight**

---




## Restaurant Distribution.


  ### 1.   City with the Most Restaurants:

  *   New Delhi leads with an impressive total of 5,473 restaurants. This signifies a vibrant and highly competitive culinary market with diverse options for consumers. The sheer volume of restaurants indicates both high demand and the potential for saturation.


  ### 2.   Followed by Major Urban Areas:

  *   Cities like Gurgaon (1,118) and Noida (1,080) are significant players, indicating a healthy restaurant scene that could support various dining options. These areas may offer opportunities for newcomers, although competition will be high.


  ### 3.   Lesser-Known Markets:

  *   Cities with fewer establishments, such as Faridabad (251), Ghaziabad (25), and others, may present opportunities for growth. The lower number of restaurants suggests less competition, allowing new entrants to capture market share by introducing innovative dining experiences.



## Average Ratings


  ### 1.   Highest Average Rating:

  *   Inner City tops the list with an average rating of 4.9. This suggests that customers are highly satisfied with their dining experiences there, making it an attractive location for gourmet and specialty restaurants.

### 2.   Other High-Rated Cities:

  *   Cities like Quezon City (4.8) and Makati City (4.65) also show high average ratings, indicating robust customer satisfaction and perhaps a trend of quality dining experiences in those areas.

  ### 3.   Challenge in Certain Markets:

  *   On the lower end, Faridabad (1.87) and Noida (2.03) exhibit significantly low average ratings. This indicates potential issues in quality or service at restaurants in these cities, presenting opportunities for new entrants to improve standards and increase customer satisfaction.

  ### 4.   Overall Restaurant Experience:

  *   Comparing the distributions highlights a discrepancy between the number of restaurants and their ratings. While New Delhi has the highest number of restaurants, it appears in the bottom tier for average ratings (2.43), suggesting that despite quantity, the quality may not meet expectations. This presents a ripe area for improvement by existing establishments.




## Market Implications


  ### 1.   Opportunities in High-Rated Markets:

  *   Investors and restaurateurs should consider focusing on high-rated areas like Inner City and Quezon City, where customer satisfaction is high and there is a clear market for quality dining experiences.

  ### 2.   Need for Improvement in Low-Rated Cities:

  *   Regions like Faridabad and Noida can benefit from strategic business initiatives aimed at elevating dining quality. New restaurants could implement better service standards, innovative menus, or unique dining concepts to address customer dissatisfaction.

  ### 3.   Potential in Emerging Markets:

  *   Cities with fewer restaurants but significant ratings offer value for new business models. By targeting these markets, entrepreneurs can introduce fresh culinary options and possibly dominate before the market becomes saturated.



## Cities with Very Few Restaurant Counts.


### 1.   Limited Dining Options:

  *   Each of the cities listed has only one restaurant. This indicates a very limited variety of dining options for residents and visitors. The lack of competition may lead to a lack of culinary diversity, which can affect customer satisfaction and dining experiences.

  ### 2.   Market Potential:

  *   Having only one restaurant suggests a market opportunity for new food businesses. Entrepreneurs could find success by introducing diverse cuisines or unique dining concepts that cater to local tastes. This could significantly enhance the dining landscape in these areas.

  ### 3.   Targeting Niche Markets:

  *   Given that many of these cities may have specific local characteristics (such as being tourist destinations or having particular demographics), new restaurant ventures could focus on niche markets. For instance, a farm-to-table concept might thrive in areas with strong agricultural ties.

   ### 4.  Community Engagement:

  *   In small towns or regions with few establishments, community engagement becomes crucial. A new restaurant could be viewed as a community hub, fostering social interactions and cultural activities. Owners might consider incorporating local flavors or traditions into their menus to resonate with residents.


## Conclusion

---


The examination of restaurant numbers and average ratings across cities presents a clear picture of opportunities and challenges in the culinary landscape. While New Delhi commands a high number of establishments, the disparity in average ratings suggests a need for improvement. Conversely, areas with fewer restaurants and high ratings could be prime locations for new ventures. By leveraging these insights, restaurateurs can make informed decisions to optimize their businesses and increase customer satisfaction.

For cities with very few restaurants, the presence of only one restaurant in each of these cities suggests an untapped opportunity for new dining establishments. Entrepreneurs can explore various angles—such as community-focused initiatives, tourism-related offerings, or niche markets—to establish successful restaurant ventures. By doing so, they can contribute to enriching the local dining scene while meeting the needs of the community.

# Task 3: Price Range Distribution

---

a) Create a histogram or bar chart to
visualize the distribution of price ranges
among the restaurants.
"""

import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

# Set the color palette
mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=['teal', 'green', 'orange', 'gray', 'brown'])

# Assuming your DataFrame is named 'df' and has a 'Price range' column
price_range_counts = df['Price range'].value_counts().sort_index()  # Count occurrences of each price range
price_ranges = price_range_counts.index
counts = price_range_counts.values

# Create horizontal bar chart
bars = plt.barh(price_ranges, counts, height=0.7)  # Adjust height as needed

# Get the color cycle
color_cycle = plt.rcParams['axes.prop_cycle'].by_key()['color']

# Apply colors to bars
for i, bar in enumerate(bars):
    bar.set_facecolor(color_cycle[i % len(color_cycle)])  # Cycle through colors

# Add data labels
for bar, value in zip(bars, counts):
    width = bar.get_width()
    plt.text(width + 40,  bar.get_y() + bar.get_height() / 2, int(value),
             va='center', ha='right')  # Adjust position as needed

plt.title('Distribution of Price Ranges')
plt.xlabel('Number of Restaurants')
plt.ylabel('Price Range')
plt.yticks(price_ranges)  # Set y-axis ticks to represent price ranges
plt.show()

"""b) Calculate the percentage of restaurants
in each price range category.
"""

import pandas as pd

# Assuming your DataFrame is named 'df' and has a 'Price range' column
price_range_counts = df['Price range'].value_counts()  # Count occurrences of each price range
total_restaurants = len(df)  # Total number of restaurants

# Calculate percentages
price_range_percentages = (price_range_counts / total_restaurants) * 100

# Display the percentages
print("Percentage of Restaurants in Each Price Range:")
for price_range, percentage in price_range_percentages.items():
    print(f"Price Range {price_range}: {percentage:.2f}%")

"""## **Insights on Restaurant Price Ranges.**

---


### 1.   Dominance of Budget-Friendly Options:

   *   Price Range 1 (Very Low/Low) has the highest number of restaurants at 4,444, accounting for 46.53% of total offerings. This indicates a strong market for affordable dining options, catering to budget-conscious consumers and possibly a wider audience.


### 2.   Significant Mid-Range Segment:

   *   Price Range 2 (Low/Mid) follows with 3,113 restaurants, representing 32.59% of the total. This suggests a healthy demand for reasonably priced dining experiences, which likely appeals to families and young professionals.


### 3.   Higher Price Ranges Less Popular:

   *   Price Range 3 (High/Mid) comprises 1,408 restaurants (14.74%), while Price Range 4 (High) has the least at 586 restaurants (6.14%). The low representation in these higher price ranges indicates that premium dining options are less prevalent and likely cater to a niche market.


### 4.   Market Opportunities:

   *   The prevalence of lower price ranges suggests opportunities for new restaurants that can offer unique concepts or high-quality cuisine at competitive prices. Conversely, there’s a potential gap in the market for more mid-range to high-end dining experiences. Investors might consider exploring upscale dining options to diversify the market.


### 5.   Consumer Trends:

   *   The data indicates a possible trend towards affordability in dining preferences, reflecting consumers' spending habits—especially in uncertain economic climates. Restaurants offering value for money may attract a larger customer base.


### 6.   Implications for Restaurant Development:

   *   Entrepreneurs looking to enter the restaurant market can benefit from the current landscape by focusing on innovative approaches to affordable dining or suggesting creative yet cost-effective mid-range options. Similarly, there is room for upscale restaurants, but they may need to develop unique selling propositions to attract a discerning clientele.



# Conclusion

The distribution of restaurants across different price ranges highlights a strong inclination toward affordable dining options, which represents both consumer preferences and market opportunities. New ventures could capitalize on budget-friendly offerings or explore gaps in higher-end dining to create a more diverse culinary landscape. Understanding these dynamics can help restaurateurs strategically position their businesses to meet consumer needs effectively.

# Task 4: Online Delivery

---

a) Determine the percentage of restaurants
that offer online delivery.
"""

import pandas as pd

# Assuming your DataFrame is named 'df' and has a column named 'Has Online delivery'
# Replace 'Has Online delivery' with the actual column name if it's different

# Filter for restaurants with online delivery
delivery_restaurants = df[df['Has Online delivery'] == 'Yes']
total_restaurants = len(df)

# Calculate the percentage
delivery_percentage = (len(delivery_restaurants) / total_restaurants) * 100

# Create a DataFrame for the table
data = {'Online Delivery': ['Yes'], 'Percentage': [delivery_percentage]}
delivery_df = pd.DataFrame(data)

# Display the table
print(delivery_df.to_string(index=False))

"""*For a better analysis, a visual showing both the percentages of restaurants that offer and do not offer Online delivery.*"""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming your DataFrame is named 'df' and has a column named 'Has Online delivery'
# Replace 'Has Online delivery' with the actual column name if it's different

# Count the occurrences of 'Yes' and 'No' in the 'Has Online delivery' column
delivery_counts = df['Has Online delivery'].value_counts()

# Create labels for the pie chart
labels = delivery_counts.index.tolist()  # ['Yes', 'No']

# Create sizes for the pie chart (values from the counts)
sizes = delivery_counts.values.tolist()

# Define colors
colors = ['teal', 'orange']

# Create the pie chart with custom colors and larger, bold labels
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors,
        textprops={'fontsize': 12, 'fontweight': 'bold'})  # Adjust fontsize as needed

# Add a title to the pie chart
plt.title('Percentage of Restaurants Offering Online Delivery')

# Ensure the circle's proportion
plt.axis('equal')

# Display the pie chart
plt.show()

"""b) Compare the average ratings of restaurants
with and without online delivery.
"""

!pip install plotly

import pandas as pd
import plotly.express as px

# Assuming your DataFrame is named 'df' and has 'Has Online delivery' and 'Aggregate rating' columns
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

# Group by 'Has Online delivery' and calculate the mean of 'Aggregate rating'
average_ratings_by_delivery = df.groupby('Has Online delivery')['Aggregate rating'].mean().reset_index()

# Rename the 'Aggregate rating' column to 'Avg Rating' for clarity
average_ratings_by_delivery = average_ratings_by_delivery.rename(columns={'Aggregate rating': 'Avg Rating'})

# Create the horizontal bar chart with custom colors and smaller size
fig = px.bar(average_ratings_by_delivery,
             x='Avg Rating',
             y='Has Online delivery',
             orientation='h',
             title='Average Ratings of Restaurants with and without Online Delivery',
             text='Avg Rating',
             color='Has Online delivery',  # Color bars based on delivery status
             color_discrete_map={'Yes': 'teal', 'No': 'orange'},  # Assign colors
             width=500,  # Adjust chart width
             height=300)  # Adjust chart height


# Update layout for bold data labels, bar headers, and smaller bars
fig.update_traces(texttemplate='<b>%{text:.2f}</b>', textposition='outside', width=0.4)  # Bold labels, smaller bar width
fig.update_layout(yaxis_title_text='<b>Has Online Delivery</b>',
                  yaxis={'tickfont': {'size': 12, 'family': 'Arial', 'color': 'black', 'weight': 'bold'}})

fig.show()

"""Rating Difference:

The difference in average ratings is 0.78, with restaurants that offer delivery receiving significantly higher ratings.

## **Insights**

---


### 1.   Preference for Delivery:

   *   The higher average rating for restaurants with online delivery (3.25) suggests that customers value the convenience and practicality of delivery options, often associating them with better service quality and overall dining experience.


### 2.   Consumer Satisfaction:

   *   The stark contrast in ratings implies that consumers may be more satisfied with their experience when restaurants provide an online delivery service. This might indicate that delivery services enhance overall customer satisfaction, possibly due to faster service or improved food quality.


### 3.   Market Dynamics:

   *   With approximately 25.66% of restaurants offering online delivery, there is a potential gap in the market. Given that 74.34% do not offer it, there may be opportunities for restaurants to implement delivery services in order to improve customer ratings and attract more business.


### 4.   Implications for Restaurant Strategy:

   *   For restaurants struggling with low ratings, considering the introduction of online delivery could be a practical strategy for boosting customer satisfaction. Additionally, marketing efforts could highlight delivery options to attract more customers.


### 5.   Trends in Dining Behavior:

   *   The findings reflect broader trends in consumer behavior, where convenience and accessibility are becoming increasingly important. Restaurants that adapt to these preferences are likely to see improvements in both ratings and customer loyalty.


## Conclusion

The comparison of average ratings indicates that restaurants with online delivery options are rated significantly higher than those without. This highlights the importance of delivery services in enhancing customer experiences and suggests that restaurants should consider implementing or improving these options to meet consumer expectations and improve their overall ratings.

# References

---



*   McKinney, W. (2010). Data structures for statistical computing in python. In Proceedings of the 9th Python in Science Conference (Vol. 445, pp. 51–56).

*   Waskom, M. L. (2021). seaborn: statistical data visualization. Journal of Open Source Software, 6(60), 3021. https://doi.org/10.21105/joss.03021

*  Hunter, J. D. (2007). Matplotlib: A 2D graphics environment. Computing in Science & Engineering, 9(3), 90–95. https://doi.org/10.1109/MCSE.2007.53

*   McKinney, W. (2011). Pandas: A high-performance tool for data analysis. In Proceedings of the 9th Python in Science Conference (pp. 12-17). Pandas Documentation

*   NumPy Development Team. (2020). numpy.where. In NumPy v1.19.5 Documentation. NumPy Documentation

*   Spiegelhalter, D., & Pearson, M. (2000). The Importance of Evidence: Reproducibility and Respect for Data. The American Statistician, 54(4), 331-335.

* Jones, E., Oliphant, E., & Peterson, P. (2001). SciPy: Open source scientific tools for Python. SciPy Documentation

*   Agresti, A. (2002). Categorical Data Analysis (2nd ed.). Wiley-Interscience. This book covers the Chi-squared test and its applications in categorical data analysis.

*  Few, S. (2009). Now You See It: Simple Visualization Techniques for Quantitative Analysis. Analytics Press. This book provides insights into the importance of data visualization in analysis.

*  Loria, S. (2014). TextBlob: Simplified Text Processing.

*   Bird, S., Klein, E., & Loper, E. (2009). Natural Language Processing with Python. O'Reilly Media.

*   Pérez, F., & Granger, B. E. (2007). IPython: a system for interactive scientific computing. Computing in Science & Engineering, 9(3), 21-29.

*  Bickel, P. J., & Freedman, D. A. (2005). Some Results on Data Collection and Analysis. In Statistical Science (Vol. 20, No. 1, pp. 1-20). This research provides an understanding of data summarization techniques.

* Cleveland, W. S. (1985). The Elements of Data Design. In Heuristic Graphics. The American Statistician, 39(1), 65-72. This reference discusses effective visualization techniques in data analysis.

*   Stuart, A., & Ord, K. (1994). Kendall’s Tau | Spearman’s Rank Correlation Coefficient. In Kendall's Advanced Theory of Statistics (Vol. 1). Wiley. This can provide context for understanding correlation methods.
"""